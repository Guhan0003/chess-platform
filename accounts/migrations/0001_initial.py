# Generated by Django 5.1.1 on 2025-09-09 08:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=200)),
                ('icon', models.CharField(default='üèÜ', max_length=10)),
                ('category', models.CharField(choices=[('games', 'Games'), ('rating', 'Rating'), ('streaks', 'Streaks'), ('puzzles', 'Puzzles'), ('special', 'Special')], default='games', max_length=20)),
                ('requirement', models.JSONField(default=dict)),
                ('points', models.IntegerField(default=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievements',
            },
        ),
        migrations.CreateModel(
            name='RatingHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_control', models.CharField(choices=[('blitz', 'Blitz'), ('rapid', 'Rapid'), ('classical', 'Classical')], max_length=10)),
                ('old_rating', models.IntegerField()),
                ('new_rating', models.IntegerField()),
                ('rating_change', models.IntegerField()),
                ('reason', models.CharField(choices=[('game_result', 'Game Result'), ('manual_adjustment', 'Manual Adjustment'), ('decay', 'Rating Decay')], default='game_result', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'rating_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_achievements',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_queen_promotion', models.BooleanField(default=True)),
                ('show_coordinates', models.BooleanField(default=True)),
                ('highlight_moves', models.BooleanField(default=True)),
                ('sound_enabled', models.BooleanField(default=True)),
                ('email_game_invites', models.BooleanField(default=True)),
                ('email_game_results', models.BooleanField(default=False)),
                ('push_notifications', models.BooleanField(default=True)),
                ('allow_challenges', models.BooleanField(default=True)),
                ('show_online_status', models.BooleanField(default=True)),
                ('board_theme', models.CharField(choices=[('classic', 'Classic'), ('modern', 'Modern'), ('wood', 'Wood'), ('marble', 'Marble')], default='classic', max_length=20)),
                ('piece_set', models.CharField(choices=[('classic', 'Classic'), ('modern', 'Modern'), ('staunton', 'Staunton')], default='classic', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('country', models.CharField(blank=True, max_length=2, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('blitz_rating', models.IntegerField(default=1200, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(3500)])),
                ('rapid_rating', models.IntegerField(default=1200, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(3500)])),
                ('classical_rating', models.IntegerField(default=1200, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(3500)])),
                ('blitz_peak', models.IntegerField(default=1200, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(3500)])),
                ('rapid_peak', models.IntegerField(default=1200, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(3500)])),
                ('classical_peak', models.IntegerField(default=1200, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(3500)])),
                ('total_games', models.IntegerField(default=0)),
                ('games_won', models.IntegerField(default=0)),
                ('games_drawn', models.IntegerField(default=0)),
                ('games_lost', models.IntegerField(default=0)),
                ('blitz_games', models.IntegerField(default=0)),
                ('rapid_games', models.IntegerField(default=0)),
                ('classical_games', models.IntegerField(default=0)),
                ('current_win_streak', models.IntegerField(default=0)),
                ('best_win_streak', models.IntegerField(default=0)),
                ('puzzles_solved', models.IntegerField(default=0)),
                ('is_online', models.BooleanField(default=False)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('preferred_time_control', models.CharField(choices=[('blitz', 'Blitz'), ('rapid', 'Rapid'), ('classical', 'Classical')], default='rapid', max_length=10)),
                ('profile_public', models.BooleanField(default=True)),
                ('show_rating', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'chess_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
